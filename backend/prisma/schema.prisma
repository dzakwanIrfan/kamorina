// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(uuid())
  name                    String
  email                   String    @unique
  nik                     String?   @unique
  password                String
  
  // Email Verification
  emailVerified           Boolean   @default(false) @map("email_verified")
  emailVerifiedAt         DateTime? @map("email_verified_at")
  emailVerificationToken  String?   @unique @map("email_verification_token")
  
  // Member Verification
  memberVerified          Boolean   @default(false) @map("member_verified")
  memberVerifiedAt        DateTime? @map("member_verified_at")
  
  // Additional Info (required for member verification)
  departmentId            String?   @map("department_id")
  department              Department? @relation(fields: [departmentId], references: [id])
  dateOfBirth             DateTime? @map("date_of_birth") @db.Date
  birthPlace              String?   @map("birth_place")
  permanentEmployeeDate   DateTime? @map("permanent_employee_date") @db.Date
  installmentPlan         Int?      @map("installment_plan") // 1 or 2
  
  // Password Reset
  passwordResetToken      String?   @unique @map("password_reset_token")
  passwordResetExpires    DateTime? @map("password_reset_expires")
  
  // Timestamps
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")
  
  roles                   UserRole[]
  
  @@map("users")
}

model Department {
  id              String   @id @default(uuid())
  departmentName  String   @unique @map("department_name")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  users           User[]
  
  @@map("departments")
}

model Level {
  id          String   @id @default(uuid())
  levelName   String   @unique @map("level_name")
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  userRoles   UserRole[]
  
  @@map("levels")
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  levelId   String   @map("level_id")
  level     Level    @relation(fields: [levelId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  
  @@unique([userId, levelId])
  @@map("user_roles")
}